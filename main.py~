#Main file for HipopyFlow
#
# Written by Rowan Kelleher
#
# Uses Hipopy package by Matthew McEneaney
# 
#

# MCParticle Class for organizing all particle data from MC::Lund
import hipopy.hipopy as hip
import numpy as np

class TVector2:
    def __init__(self, X, Y):
        self.X = X
        self.Y = Y
    def X(self):
        return self.X
    def Y(self):
        return self.Y
class TVector3:
    def __init__(self, X, Y, Z):
        self.X = X
        self.Y = Y
        self.Z = Z
    def X(self):
        return self.X
    def Y(self):
        return self.Y
    def Z(self):
        return self.Z
class TLorentzVector:
    def __init__(self):
        self.Px = 0
        self.Py = 0
        self.Pz = 0
        self.E = 0
        self.M = 0
    def M(self):
        return E * E - Px * Px - Py * Px - Pz * Pz
    def SetPxPyPzE(self, Px, Py, Pz, E):
        self.Px = Px
        self.Py = Py
        self.Pz = Pz
        self.E = E
        self.M = E * E - Px * Px - Py * Px - Pz * P
    def Px(self):
        return Px
    def Py(self):
        return Py
    def Pz(self):
        return Pz
    def E(self):
        return E


def Pfunc(Px,  Py, Pz):
    return np.sqrt(Px*Px + Py*Py + Pz*Pz)

def Efunc(M, P):
    return np.sqrt(M * M + P * P)

def Ptfunc(Px, Py):
    return np.sqrt(Px*Px + Py*Py)

def PtVectfunc(lv):
    Px = lv.Px()
    Py = lv.Py()
    Pt = TVector2(Px, Py)
    return Pt

class MCParticle:
    def __init__(self):
#         super(MCParticle, self).__init__()
        #Lund bank variables
        self.pid = 0;
        self.myid = 0;
        self.px = 0;
        self.py = 0;
        self.pz = 0;
        self.daughter = 0;
        self.parent = 0;
        self.mass = 0;
        self.P = 0;
        self.E = 0;
        self.vz = 0;
        self.mytype = 0;
        #TLorentzVector
        self.lv = TLorentzVector();

        #Calculations
        self.Pt = 0;
        self.PtVect = TVector2(0,0);
        
    #fillparticles
    #setvectors
    #update
    def fillParticle(self, _id, _pid, _px, _py, _pz, _daughter, _parent, _mass, _vz, _type):
        self.myid = _id;
        self.pid = _pid;
        self.px = _px;
        self.py = _py;
        self.pz = _pz;
        self.daughter = _daughter;
        self.parent = _parent;
        self.mass = _mass;
        self.vz = _vz;
        self.mytype = _type;

        self.P = Pfunc(self.px, self.py, self.pz);
        self.E = Efunc(self.mass, self.P);

        self.lv.SetPxPyPzE(self.px,self.py,self.pz,self.E);

        self.Pt = Ptfunc(self.px, self.py);
        self.PtVect = PtVectfunc(self.lv);
        
    def setVectors(self):
        self.lv.SetPxPyPzE(self.px,self.py,self.pz,self.E);

        self.P = Pfunc(self.px, self.py, self.pz);
        self.E = Efunc(self.mass, self.P);

        self.Pt = Ptfunc(self.px, self.py);
        self.PtVect = PtVectfunc(self.lv);
        
class MultiParticle(MCParticle):
    def __init__(self):
        super().__init__()
        self.v_id = []
        self.v_pid = []
        self.v_px = []
        self.v_py = []
        self.v_pz = []
        self.v_daughter = []
        self.v_parent = []
        self.v_mass = []
        self.v_vz = []
        self.v_name = []
        self.v_type = []
    
    
    def update(self, _id,  _pid, _px, _py, _pz,  _daughter,  _parent, _mass, _vz,  _type):
        self.v_id.append(_id)
        self.v_pid.append(_pid)
        self.v_px.append(_px)
        self.v_py.append(_py)
        self.v_pz.append(_pz)
        self.v_daughter.append(_daughter)
        self.v_parent.append(_parent)
        self.v_mass.append(_mass)
        self.v_vz.append(_vz)
        self.v_type.append(_type)

class Pidi(MultiParticle):
    def __init__(self):
        super().__init__()
        self.select_id1 = -999
        self.select_id2 = -999
        self.count = 0
        self.exist = False
class Quark(MultiParticle):
    def __init__(self):
        super().__init__()
        self.pair_id = -999
        self.final_id = -999
        
class Diquark(MultiParticle):
    def __init__(self):
        super().__init__()
        self.select_id  = -999
    
    def diquarkReset():
        self.v_id.clear()
        self.v_pid.clear()
        self.v_px.clear()
        self.v_py.clear()
        self.v_pz.clear()
        self.v_daughter.clear()
        self.v_parent.clear()
        self.v_mass.clear()
        self.v_vz.clear()
        
def main():
    filename = "/cache/clas12/rg-a/production/montecarlo/clasdis/fall2018/torus-1/v1/bkg45nA_10604MeV/45nA_job_3051_0.hipo"
    file = hip.open(filename,mode='r')
    vdiquarklist = [1103, 2101, 2103, 2203, 3101, 3103, 3201, 3203, 3303, 4101, 4103, 4201, 4203, 4301, 4303, \
                    4403, 5101, 5103, 5201, 5203, 5301, 5303, 5401, 5403, 5503];
    vquarklist = [-6,-5,-4,-3,-2,-1,1,2,3,4,5,6];
    vhadronlist = [-3122, -211, 111, 211, 1114, 2114, 2212, 2214, 2224, 3112, 3114, 3122, 3214, 3222, 3224, 3312, \
                   3324, -323, -313, -213, 113, 213, 221, 223, 310, 313, 323, 331, 333];
    event_count = 0
    for event in file:
        event_count += 1
        if(event_count > 20):
            break
        v_id = []
        v_pid = []
        v_px = []
        v_py = []
        v_pz = []
        v_parent = []
        v_daughter = []
        v_vz = []
        v_type = []
        v_id = file.getBytes('MC::Lund','index')
        v_pid = file.getInts('MC::Lund','pid')
        v_px = file.getFloats('MC::Lund','px')
        v_py = file.getFloats('MC::Lund','py')
        v_pz = file.getFloats('MC::Lund','pz')
        v_parent = file.getBytes('MC::Lund','parent')
        v_daughter = file.getBytes('MC::Lund','daughter')
        v_vz = file.getFloats('MC::Lund','vz')
        v_type = file.getBytes('MC::Lund','type')
        v_mass = file.getFloats('MC::Lund','mass')

        electron = MCParticle()
        proton = MCParticle()
        Lund = MCParticle()

        photon = Pidi()

        quark = Quark()

        diquark = Pidi()
        
        MidHadron = Pidi()
        EndHadron = Pidi()
        
        for i in range(len(v_pid)):
            print(i)
            id_ = v_id[i]
            pid = v_pid[i]
            px = v_px[i]
            py = v_py[i]
            pz = v_pz[i]
            parent = v_parent[i]
            daughter = v_daughter[i]
            vz = v_vz[i]
            mass = v_mass[i]
            type_ = v_type[i]
            
            if(pid==11 and parent==1):
                electron.fillParticle(id_, pid, px, py, pz, daughter, parent, mass, vz, type_);
                electron.setVectors();
                print("found electron, energy: ")
                print(electron.E)
            #all quarks
            elif(pid in vquarklist):
                quark.fillParticle(id_, pid, px, py, pz, daughter, parent, mass, vz, type_);
                quark.update(id_, pid, px, py, pz, daughter, parent, 
                              mass, vz, type_);
                quark.v_name.push_back(" ");

            #MCParticle
            elif(pid==92 or pid == 91):
                Lund.fillParticle(id_, pid, px, py, pz, daughter, parent, mass, vz, type_);
                Lund.setVectors();
            
            #Diquark
            elif(pid in vdiquarklist):
                diquark.fillParticle(id_, pid, px, py, pz, daughter, parent, mass, vz, type_);
                diquark.update(id_, pid, px, py, pz, daughter, parent, 
                              mass, vz, type_);
                diquark.exist = True;
            
            #Photon
            if(pid == 22 and type_ == 1):
                photon.fillParticle(id_, pid, px, py, pz, daughter, parent, mass, vz, type_);
                photon.update(id_, pid, px, py, pz, daughter, parent, 
                              mass, vz, type_);
            
            #Proton target
            elif(id == 2):
                proton.fillParticle(id_, pid, px, py, pz, daughter, parent, mass, vz, type_);
                proton.setVectors();
            
            # Mid Hadrons
            elif((pid in vhadronlist) and (parent == 2)):
                MidHadron.fillParticle(id_, pid, px, py, pz, 
                                       daughter, parent, mass, vz, type_);
                MidHadron.update(id_, pid, px, py, pz, daughter, parent, 
                              mass, vz, type_);
                MidHadron.v_name.push_back(" ");
            
            #End Hadrons
            elif((pid in vhadronlist) and (parent != 2)):
                EndHadron.fillParticle(id_, pid, px, py, pz, 
                                       daughter, parent, mass, vz, type_);
                EndHadron.update(id_, pid, px, py, pz, daughter, parent, 
                              mass, vz, type_);
                EndHadron.v_name.push_back(" ");

#     Testing stuff:
#     myp = MultiParticle()
#     myp.fillParticles(1,1,2,4,5,1,1,1, 1, 1)
#     print(myp.lv.Px())
#     myp.update(2,1, 10, 10, 10, 12, 4, 4, 4, 4)
#     myp.update(2,1, 10, 10, 10, 12, 4, 4, 4, 4)

#     print(myp.v_vz)
    
    
main()
